{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","block","setBlock","random","setRandom","button","count1","setCount1","count2","setCount2","element1","icon","faHandPaper","size","element2","faHandScissors","element3","faHandRock","className","Container","Row","Col","xs","md","onClick","e","array","Math","floor","length","console","log","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8514f38c.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faHandPaper} from '@fortawesome/free-solid-svg-icons';\nimport {faHandScissors} from '@fortawesome/free-solid-svg-icons';\nimport {faHandRock} from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\nimport {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Container from 'react-bootstrap/Container'\n\nfunction App() {\n\n  const [block, setBlock] = useState(0);\n  let [random, setRandom] = useState('');\n  const [button, setButton] = useState('true');\n  let [count1, setCount1] = useState(0);\n  let [count2, setCount2] = useState(0);\n\n  const element1 = <FontAwesomeIcon icon={faHandPaper}  size = '4x' />\n  const element2 = <FontAwesomeIcon icon={faHandScissors} size = '4x'  />\n  const element3 = <FontAwesomeIcon icon={faHandRock} size = '4x'  />\n\n  const handleClick1 = () => {\n      setBlock(2);\n  }\n  const handleClick2 = () => {\n      setBlock(3);\n  }\n  const handleClick3 = () => {\n      setBlock(4);\n  }\n\n  const handleReveal = (e) => {\n    let array = [element1, element2, element3];\n    setRandom(random = array[Math.floor(Math.random() * array.length)]);\n     console.log(element1);\n     console.log(random);\n     console.log(random === element1);\n     console.log(block);\n    if( (random === element3 && block === 2) ||  (random === element1 && block === 3)  ||\n     (random === element2 && block === 4) ){\n      setCount1(count1 += 1);\n\n    }else if( (random === element3 && block === 3) || (random === element1 && block === 4) ||\n    (random === element2 && block === 2 )){\n      setCount2(count2 += 1);\n    }\n    else if((random === element1 && block === 2) || (random === element2 && block === 3) || \n    (random === element3 && block === 4 )){\n      setCount1(count1 += 1);\n      setCount2(count2 += 1);\n    }else{\n      setCount1(count1);\n      setCount2(count2);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n    <Container>\n       \n          <Row>\n          <Col xs ={3} md = {3}></Col>\n          <Col xs ={3} md = {3}>\n            <div className = 'score'>{count1}</div>\n            </Col>\n            <Col xs ={3} md={3}>\n            <div className = 'score'>{count2}</div>\n            </Col>\n            <Col xs ={3} md ={3}></Col>\n            </Row>  \n            \n         <Row>\n         <Col xs ={3} md ={3}></Col>\n          <Col xs ={3} md={3}>\n            <div className = 'you'>\n                    {block === 2 ? element1 : null} \n                    {block === 3 ? element2 : null}\n                    {block === 4 ? element3 : null} \n                    <h3 className = 'text-center' >You</h3>\n                </div>\n            </Col>\n            <Col xs ={3} md={3}>\n            <div className = 'field'>\n                <div className = 'computer'>{random}\n                <h3 className = 'text-center' >Opponent</h3>\n                </div>\n                \n                <button className = 'btn1 btn btn-info btn-md' onClick = {handleReveal} disabled = {button ? block === 0 : false }>\n                  Odsłoń</button>\n            </div>\n            </Col>\n            <Col xs ={3} md ={3}></Col>\n            </Row>\n           \n            <div className = 'signs'>\n            <Row>\n            <Col xs ={3} md ={3}></Col>\n            <Col xs ={2} md ={2}>\n                <button onClick = {handleClick1}>{element1}</button>\n             </Col> \n            <Col xs ={2} md ={2}>   \n                <button onClick = {handleClick2}>{element2}</button>\n             </Col> \n             <Col xs = {2} md ={2}>\n                <button onClick = {handleClick3}>{element3}</button>\n                </Col> \n                <Col xs ={3} md ={3}></Col>\n                </Row>\n            </div>\n            \n            </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}